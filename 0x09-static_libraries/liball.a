!<arch>
0-isupper.c/    0           0     0     644     226       `
#include "holberton.h"

/**
 * _isupper - checks to see if a character is in upper case
 * @c: character to be tested
 * Return: 1 if true else 0
 */
int _isupper(int c)
{
if (c >= 65 && c <= 90)
{
return (1);
}
return (0);
}
0-memset.c/     0           0     0     644     287       `
#include "holberton.h"

/**
 *_memset - fills memory with a constant byte
 *@s: pointer to memory area
 *@b: constant byte b
 *@n: number of bytes
 *Return: char
 */
char *_memset(char *s, char b, unsigned int n)
{
unsigned int i;
for (i = 0; i < n; i++)
{
*(s + i) = b;
}
return (s);
}

0-strcat.c/     0           0     0     644     403       `
#include "holberton.h"

/**
 *_strcat - concatenates two strings, appends source to destination
*@dest: destination
*@src: source
*Return: pointer to destination
*/

char *_strcat(char *dest, char *src)
{
int i;
int j;
int k;
i = 0;
j = 0;
while (*(src + i) != 0)
{
i++;
}
while (*(dest + j) != 0)
{
j++;
}
for (k = 0; k < i; k++)
{
*(dest + j) = *(src + k);
j++;
}
*(dest + j) = '\0';
return (dest);
}

1-isdigit.c/    0           0     0     644     222       `
#include "holberton.h"

/**
 * _isdigit - checks to see if a givin value is a digit
 * @c: character to be tested
 * Return: 1 if true else 0
 */
int _isdigit(int c)
{
if (c >= 48 && c <= 57)
{
return (1);
}
return (0);
}
1-memcpy.c/     0           0     0     644     302       `
#include "holberton.h"

/**
 *_memcpy - copies memory area
 *@dest: pointer to destination
 *@src: source to copy from
 *@n: number of bytes
 *Return: char
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int i;
for (i = 0; i < n; i++)
{
*(dest + i) = *(src + i);
}
return (dest);
}
1-strncat.c/    0           0     0     644     460       `
#include "holberton.h"

/**
 *_strncat - concatenates two strings, appends n bytes
 *from source to destination
*@dest: destination
*@src: source
*@n: number of bytes
*Return: pointer to destination
*/

char *_strncat(char *dest, char *src, int n)
{
int i;
int j;
int k;
j = 0;
i = 0;
while (*(dest + j) != 0)
j++;
while (*(src + i) != 0)
i++;
if (n > i)
n = i;
for (k = 0; k < n; k++)
{
*(dest + j) = *(src + k);
j++;
}
*(dest + j) = '\0';
return (dest);
}


100-atoi.c/     0           0     0     644     375       `
#include "holberton.h"

/**
 * _atoi -  function that convert a string to an integer.
 *@s: string
 *Return: integer
 */
int _atoi(char *s)
{
int i;
int j;
int k;
int tmp;
i = 0;
while (*(s + i) != 0)
{
i++;
}
for (j = 0; j < i; j++)
{
if (*(s + j) >= 0 && *(s + j) <= 9)
  {
    for (k = j; k < i; k++)
      {
	tmp = *(s + k);
      }
  }
break;

continue;
}
return (0);
}

2-strchr.c/     0           0     0     644     355       `
#include "holberton.h"

/**
 *_strchr - locates a character in a string
 *@s: pointer to string s
 *@c: character to locate
 *Return: char
 */
char *_strchr(char *s, char c)
{
unsigned int i;
char *p;
unsigned int j;
j = 0;
while (*(s + j) != 0)
j++;
for (i = 0; i <= (j + 1); i++)
{
if (*(s + i) == c)
{
p = &(*(s + i));
return (p);
}
}
return (NULL);
}

2-strlen.c/     0           0     0     644     231       `
#include "holberton.h"
#include <stdio.h>

/**
 * _strlen - returns the length of a string
 *@s: pointer
 *Return: length
 */
int _strlen(char *s)
{
int l = 0;
char y = *(s + 0);
while (y != 0)
{
l++;
y = *(s + l);
}
return (l);
}

2-strncpy.c/    0           0     0     644     412       `
#include "holberton.h"

/**
 *_strncpy - copys n bytes of src to dest
*@dest: destination
*@src: source
*@n: number of bytes
*Return: pointer to destination
*/

char *_strncpy(char *dest, char *src, int n)
{
int j;
int k;
j = 0;
while (*(src + j) != 0)
{
j++;
}
for (k = 0; k < n; k++)
{
*(dest + k) = *(src + k);
}
if (n <= j)
return (dest);
else
{
while (j < n)
{
*(dest + j) = '\0';
j++;
}
}
return (dest);
}
3-islower.c/    0           0     0     644     222       `
#include <stdio.h>
#include "holberton.h"

/**
 *_islower- checks if a letter is in lowercase
 *@c: character to be checked
 *Return: 1 or 0
 */
int _islower(int c)
{
if (c >= 97 && c <= 122)
{
return (1);
}
return (0);
}
3-puts.c/       0           0     0     644     263       `
#include "holberton.h"
#include <stdio.h>

/**
 * _puts - prints a string followed by a new line
 *@str: string
 *Return: void
 */
void _puts(char *str)
{
int i;
char c;
i = 0;
while (*(str + i) != 0)
{
c = *(str + i);
putchar(c);
i++;
}
putchar('\n');
return;
}

3-strcmp.c/     0           0     0     644     303       `
#include "holberton.h"

/**
 *_strcmp - compares two strings
*@s1: string 1
*@s2: string 2
*Return: an int
*/

int _strcmp(char *s1, char *s2)
{
int i;
int j;
int k;
i = 0;
while (*(s1 + i) != 0)
{
i++;
}
for (j = 0; j < i; j++)
{
k = *(s1 + j) - *(s2 + j);
if (k == 0)
continue;
break;
}
return (k);
}

3-strspn.c/     0           0     0     644     986       `
#include "holberton.h"

unsigned int find_h(unsigned int *arr);

/**
 *_strspn - gets the length of a prefix substring
 *@s: pointer to string s
 *@accept: prefix substring
 *Return: number of bytes in initial segment
 * of s which consit only of bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
unsigned int i;
unsigned int k;
unsigned int p[30];
unsigned int m;
unsigned int b;
unsigned int j;
m = 0;
for (i = 0; i < 30; i++)
p[i] = 0;
while (*(s + j) != 0)
j++;
for (i = 0; i < (j + 1); i++)
{
for (k = 0; *(s + k) != '\0'; k++)
{
if (accept[i] == s[k])
{
p[m] = (k + 1);
m++;
break;
}
}
}
b = find_h(p);
return (b);
}

/**
 *find_h - looks for the highest integer in an
 * array using bubble sort technique
 *@arr: array
 *Return: highest integer
 */
unsigned int find_h(unsigned int *arr)
{
int i;
unsigned int tmp;
for (i = 0; i < 30; i++)
{
if (arr[i] > arr[i + 1])
{
tmp = arr[i];
arr[i] = arr[i + 1];
arr[i + 1] = tmp;
}
else
continue;
}
return (arr[29]);
}
4-isalpha.c/    0           0     0     644     243       `
#include <stdio.h>
#include "holberton.h"

/**
 *_isalpha - checks if a character is an alphabet
 *@c: input parameter
 *Return: 1 or 0
 */
int _isalpha(int c)
{
if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
{
return (1);
}
return (0);
}

4-strpbrk.c/    0           0     0     644     519       `
#include "holberton.h"

/**
 *_strpbrk - searches a string for any of a set of bytes.
 *@s: pointer to string
 *@accept: string in whing byte to search for is.
 *Return: a pointer to the byte in s that matches one of the bytes in
 *accept, or NULL if no such byte is found.
 */
char *_strpbrk(char *s, char *accept)
{
int i;
int j;
int m;
char *p;
m = 0;
while (s[m] != '\0')
m++;
for (i = 0; i <= m; i++)
{
for (j = 0; accept[j] != '\0'; j++)
{
if (s[i] == accept[j])
{
p = &(s[i]);
return (p);
}
}
}
return (NULL);
}

5-strstr.c/     0           0     0     644     577       `
#include "holberton.h"

/**
 *_strstr - locates a substring
 *@haystack: pointer to string
 *@needle: substring to find
 *Return: a pointer to the begining of th elocated substring
 *or NULL if no such byte is found.
 */
char *_strstr(char *haystack, char *needle)
{
int i;
int j;
int k;
int m;
char *p;
k = 0;
while (haystack[k] != '\0')
k++;
while (needle[k] != '\0')
m++;
for (i = 0; i <= k; i++)
{
if (haystack[i] == needle[0])
{
p = &(haystack[i]);
for (j = 0; j <= m; j++)
{
if (haystack[i + j] != needle[j])
  {
break;
  }
if (j == m)
return (p);
}
}
}
return (NULL);
}

6-abs.c/        0           0     0     644     281       `
#include <stdio.h>
#include "holberton.h"

/**
 *_abs - computes the absolute value of an integer
 *@n: integer whose absolute value is to be determined
 *Return: 1, 0 or -1
 */
int _abs(int n)
{
if (n >= 0)
{
return (n);
}
else if (n < 0)
{
n = 0 - n;
return (n);
}
return (2);
}

9-strcpy.c/     0           0     0     644     424       `
#include "holberton.h"

/**
 * _strcpy - copies the string pointed to by src including terminating
 *null byte(\0), to the buffer pointed to by dest.
 *@dest: pointer to an array of ints
 *@src: no of elments to print
 *Return: pointer to destination
 */
char *_strcpy(char *dest, char *src)
{
int i;
int tmp;
i = 0;
while (*(src + i) != 0)
{
tmp = *(src + i);
*(dest + i) = tmp;
i++;
}
*(dest + i) = '\0';
return (dest);
}
_putchar.c/     0           0     0     644     248       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
  return (write(1, &c, 1));
}
